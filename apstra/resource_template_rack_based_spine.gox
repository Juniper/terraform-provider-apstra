package apstra

import (
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

type rDesignTemplateSpine struct {
	Count               types.Int64  `tfsdk:"count"`
	SuperSpineLinkSpeed types.String `tfsdk:"super_spine_link_speed"`
	SuperSpineLinkCount types.Int64  `tfsdk:"super_spine_link_count"`
	LogicalDeviceId     types.String `tsdk:"logical_device_id"`
	LogicalDeviceData   types.Object `tfsdk:"logical_device"`
	TagIds              types.Set    `tfsdk:"tag_data"`
	TagData             types.Set    `tfsdk:"tag_data"`
}

func (o *rDesignTemplateSpine) attributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"count": schema.Int64Attribute{
			MarkdownDescription: "Number of spine switches.",
			Required:            true,
		},
		"super_spine_link_speed": schema.StringAttribute{
			MarkdownDescription: "Speed of links to super spine switches.",
			Required:            true,
		},
		"super_spine_link_count": schema.Int64Attribute{
			MarkdownDescription: "Count of links to each super spine switch.",
			Required:            true,
		},
		"logical_device_id": schema.StringAttribute{
			MarkdownDescription: "Apstra Object ID of the Logical Device used to model this Spine Switch.",
			Required:            true,
			Validators:          []validator.String{stringvalidator.LengthAtLeast(1)},
		},
		"logical_device": schema.SingleNestedAttribute{
			MarkdownDescription: "Logical Device attributes as represented in the Global Catalog.",
			Computed:            true,
			Attributes:          logicalDeviceData{}.resourceAttributes(),
		},
		"tag_ids": schema.SetAttribute{
			ElementType:         types.StringType,
			Optional:            true,
			MarkdownDescription: "Set of Tag IDs to be applied to this Access Switch",
			Validators:          []validator.Set{setvalidator.SizeAtLeast(1)},
		},
		"tag_data": schema.SetNestedAttribute{
			MarkdownDescription: "Details any tags applied to the Spine Switches.",
			Computed:            true,
			NestedObject: schema.NestedAttributeObject{
				Attributes: tagData{}.resourceAttributes(),
			},
		},
	}
}

func (o rDesignTemplateSpine) attrTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"count":                  types.Int64Type,
		"super_spine_link_speed": types.StringType,
		"super_spine_link_count": types.Int64Type,
		"logical_device_id":      types.StringType,
		"logical_device":         types.ObjectType{AttrTypes: logicalDeviceData{}.attrTypes()},
		"tag_ids":                types.SetType{ElemType: types.StringType},
		"tag_data":               types.SetType{ElemType: types.ObjectType{AttrTypes: tagData{}.attrTypes()}},
	}
}
