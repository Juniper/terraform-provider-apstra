# This example creates a blueprint, including:
# - rack type
# - template
# - blueprint instantiation from template
#
# It then assigns resource pools and devices (by serial number - these are the
# serial numbers found in a specific cloudlabs "Customer" topology) to roles
# in the fabric

# Create IPv4 resource pool
resource "apstra_ipv4_pool" "r" {
  name    = "terraform"
  subnets = [{ network = "10.0.0.0/8" }]
}

# Create ASN resource pool
resource "apstra_asn_pool" "r" {
  name = "terraform"
  ranges = [{
    first = 1000
    last  = 1999
  }]
}

# Create a very simple rack type
resource "apstra_rack_type" "r" {
  name                       = "terraform"
  fabric_connectivity_design = "l3clos"
  leaf_switches = {
    leaf_one = {
      logical_device_id = "virtual-7x10-1"
      spine_link_count  = 1
      spine_link_speed  = "10G"
    }
  }
}

# Create a template using the rack type. Note that the `rack_infos` map is
# keyed by rack type ID. Because the key is a reference, it needs to be
# wrapped in parenthesis.
resource "apstra_template_rack_based" "r" {
  name                     = "terraform"
  overlay_control_protocol = "evpn"
  asn_allocation_scheme    = "unique"
  spine = {
    count             = 2
    logical_device_id = "virtual-7x10-1"
  }
  rack_infos = {
    (apstra_rack_type.r.id) = {
      count = 3
    }
  }
}

# Instantiate the blueprint from the template
resource "apstra_datacenter_blueprint" "r" {
  name        = "terraform"
  template_id = apstra_template_rack_based.r.id
}

# Assign ASN pool to fabric roles
resource "apstra_datacenter_resource_pool_allocation" "asn" {
  for_each     = toset(["spine_asns", "leaf_asns"])
  blueprint_id = apstra_datacenter_blueprint.r.id
  role         = each.key
  pool_ids     = [apstra_asn_pool.r.id]
}

# Assign IPv4 pool to fabric roles
resource "apstra_datacenter_resource_pool_allocation" "ipv4" {
  for_each     = toset(["spine_loopback_ips", "leaf_loopback_ips", "spine_leaf_link_ips"])
  blueprint_id = apstra_datacenter_blueprint.r.id
  role         = each.key
  pool_ids     = [apstra_ipv4_pool.r.id]
}

# Assign interface maps to fabric nodes
resource "apstra_datacenter_device_allocation" "r" {
  for_each         = toset(["spine1", "spine2", "terraform_001_leaf1", "terraform_002_leaf1", "terraform_003_leaf1"])
  blueprint_id     = apstra_datacenter_blueprint.r.id
  node_name        = each.key
  interface_map_id = "Juniper_vQFX__slicer-7x10-1"
}

resource "apstra_datacenter_routing_policy" "r" {
  name  = "terraform"
  description = "terraform description"
  blueprint_id = apstra_datacenter_blueprint.r.id
  import_policy = "all"
#  import_policy = "default_only"
#  import_policy = "extra_only"
}


#data "apstra_blueprint_deployment" "status" {
#  blueprint_id = apstra_datacenter_blueprint.r.id
#  depends_on = [
#    apstra_datacenter_resource_pool_allocation.asn,
#    apstra_datacenter_resource_pool_allocation.ipv4,
#    apstra_datacenter_device_allocation.switches,
#  ]
#}
#
#resource "null_resource" "trigger" {
#  triggers = {
#    stage = data.apstra_blueprint_deployment.status.revision_staged
#  }
#}
#
#resource "apstra_blueprint_deployment" "deploy" {
#  depends_on = [ null_resource.trigger ]
#  blueprint_id = apstra_datacenter_blueprint.r.id
#}
#
#output "resource_deploy" {
#  value = apstra_blueprint_deployment.deploy
#  depends_on = [
#    apstra_datacenter_resource_pool_allocation.asn,
#    apstra_datacenter_resource_pool_allocation.ipv4,
#    apstra_datacenter_device_allocation.switches,
#  ]
#}

#resource "null_resource" "deploy_trigger" {
#  triggers = {
#    bp_version = data.apstra_blueprint_deployment.status.revision_staged
#    foo = "foo"
#  }
#}


#output "blueprint" {
#  value = data.apstra_datacenter_blueprint.status
#}

#resource "null_resource" "commit_trigger" {
#  triggers = {
#    blueprint = data.apstra_blueprint.status.version
#  }
#}
#
#resource "apstra_blueprint_deployment" "r" {
#  depends_on = [
#    apstra_datacenter_resource_pool_allocation.asn,
#    apstra_datacenter_resource_pool_allocation.ipv4,
#    apstra_datacenter_device_allocation.switches,
#  ]
#  blueprint_id = apstra_datacenter_blueprint.r.id
#}

#output "commit" {
#  value = apstra_blueprint_commit.r
#}
